---
title: "2024_04_26_VCF_Code_Review"
editor: source
format: 
  html:
    page-layout: full
    df-print: kable
---

This notebook will try and improve on the VCF to MAF pipeline by feeding the annotated VCF files directly into ANNOVAR instead of creating .avinput files using the vcfR package.

# Libraries

```{r}
suppressPackageStartupMessages({
library(tidyverse)
library(maftools)
})

options(future.globals.maxSize = 14000 * 1024^2) 
```

# Directories

```{r}
data.dir <- "data/raw_data/"

results.dir <- "2024_04_26_results/"

plots.dir <- "2024_04_26_results/plots/"

if(!exists(results.dir)){
  dir.create(results.dir)
}
```

# ANNOVAR

## PC setup - Powershell conda environment

I work on a PC, so I don't have a native environment to run ANNOVAR which is written in Perl. In order to run it I need to create a conda environment with Perl installed.

The following code chunks were prepared following the tutorial recommended by the ANNOVAR website - <https://github.com/WGLab/Workshop_Annotation>

I started by downloading the [Anaconda Distribution Software](https://www.anaconda.com/download) and installing it.

After opening the Navigator, I select "Powershell Prompt."

![](2024_04_15_figures/anaconda.png){fig-align="center"}

Here's a look at the terminal.

![](2024_04_15_figures/terminal.png){fig-align="center" width="667"}

This starts a terminal in my `Users` folder, which is on a different hard drive than the rest of my R data. For convenience I created a few new directories to store relevant files and scripts here.

```{r}
# In powershell terminal

# mkdir conda_projects
# cd .\conda_projects\
# mkdir 2023_10_17_Dallas_SNP_vcf_files
# cd .\2023_10_17_Dallas_SNP_vcf_files\
```

Now I can create my conda environment. I will name it "annotation."

```{r}
# In powershell termianl

# conda create --name annotation
# conda activate annotation
```

![](2024_04_15_figures/conda%20activate.png){fig-align="center"}

The *(annotation)* at the front of the terminal shows that we are in the conda environment. Now to install Perl. You may also want to install gzip so that it automatically unzips the libraries we download in a few steps.

```{r}
# In powershell terminal

# conda install perl
# conda install -c msys2 m2-gzip
```

Select "y" when prompted. Once it is complete you can verify the install.

```{r}
# In powershell terminal

# Check version of perl installed
# perl -v
```

![](2024_04_15_figures/perl%20version.png){fig-align="center"}

Now we can download and install ANNOVAR. You need to enter your name and e-mail on the [ANNOVAR website](https://www.openbioinformatics.org/annovar/annovar_download_form.php) to get the zip file. After that, we need to download and install extra libraries. Libraries available are listed [here](https://annovar.openbioinformatics.org/en/latest/user-guide/download/). Each library has a different version (hg19, hg38, etc), so check the genome versions used to generate your VCF files.

Libraries needed:

-   refGene

-   cytoBand

-   exac03

-   avsnp147

-   dbnsfp30a

The `annotate_variation.pl` script has the download function. The command syntax is:

`perl annotate_variation.pl -buildver (genome version) -downdb -webfrom annovar (library name) (path)`

The parts in parentheses are to be filled in by the user.

```{r}
# In powershell terminal

# perl annotate_variation.pl -buildver hg38 -downdb -webfrom annovar refGene humandb/
# perl annotate_variation.pl -buildver hg38 -downdb -webfrom annovar cytoBand humandb/
# perl annotate_variation.pl -buildver hg38 -downdb -webfrom annovar exac03 humandb/
# perl annotate_variation.pl -buildver hg38 -downdb -webfrom annovar avsnp147 humandb/
# perl annotate_variation.pl -buildver hg38 -downdb -webfrom annovar dbnsfp30a humandb/
```

You will also need to add the genome prefix to the Cytoband.txt file. In this case, I renamed it "hg38_cytoBand.txt".

## table_annovar.pl

Now we can run `table_annovar.pl`.

```{r}
# In powershell terminal

# perl table_annovar.pl data/DS-1-CL.haplotypecaller.filtered_snpEff.ann.vcf humandb/ -buildver hg38 -out hg38_results/DS-1-CL -remove -protocol refGene,cytoBand,exac03,avsnp147,dbnsfp30a -operation g,r,f,f,f -nastring . -vcfinput -polish

# Repeat for all 6 samples: DS-1-CL, DS-1-Pt, DS-76-CL, DS-76-Pt, DS-81-CL, DS-81-Pt
```

+------------------------------------------------------+---------------------------------------------------------------------------------------------------------+--------------------------------------------------+
| Code                                                 | Description                                                                                             | Other Info                                       |
+:====================================================:+:=======================================================================================================:+:================================================:+
| table_annovar.pl                                     | Script we are calling                                                                                   | Perl scripts end in .pl                          |
+------------------------------------------------------+---------------------------------------------------------------------------------------------------------+--------------------------------------------------+
| data/DS-1-CL.haplotypecaller.filtered_snpEff.ann.vcf | Directory and name of the input file                                                                    |                                                  |
+------------------------------------------------------+---------------------------------------------------------------------------------------------------------+--------------------------------------------------+
| humandb/                                             | Location of library files                                                                               | refGene, CytoBand, etc.                          |
+------------------------------------------------------+---------------------------------------------------------------------------------------------------------+--------------------------------------------------+
| -buildver hg38                                       | Flag for genome version (hg38 here)                                                                     | Could be hg19, mm9, etc.                         |
+------------------------------------------------------+---------------------------------------------------------------------------------------------------------+--------------------------------------------------+
| -out hg38_results/DS-1-CL                            | Flag for output directory (hg38_results) and file name. It will make the directory if it doesn't exist. | "DS-1-CL" will be the prefix on all output files |
+------------------------------------------------------+---------------------------------------------------------------------------------------------------------+--------------------------------------------------+
| -remove                                              | Removes temporary files                                                                                 |                                                  |
+------------------------------------------------------+---------------------------------------------------------------------------------------------------------+--------------------------------------------------+
| -protocol refGene,cytoBand,exac03,avsnp147,dbnsfp30a | Protocol flag followed by all the functions we are using. Comma separated                               |                                                  |
+------------------------------------------------------+---------------------------------------------------------------------------------------------------------+--------------------------------------------------+
| -operation g,r,f,f,f                                 | Operation flag specifying type of operation. Comma separated. Five protocols require five flags.        | g = gene                                         |
|                                                      |                                                                                                         |                                                  |
|                                                      |                                                                                                         | r = region                                       |
|                                                      |                                                                                                         |                                                  |
|                                                      |                                                                                                         | f = filter                                       |
+------------------------------------------------------+---------------------------------------------------------------------------------------------------------+--------------------------------------------------+
| -nastring .                                          | Value to display when a score is not available                                                          | "." in our code                                  |
+------------------------------------------------------+---------------------------------------------------------------------------------------------------------+--------------------------------------------------+
| -vcfinput                                            | This flag specifies a VCF file as input                                                                 |                                                  |
+------------------------------------------------------+---------------------------------------------------------------------------------------------------------+--------------------------------------------------+
| -polish                                              | "Polishes" the protein notation for indels (ex: p.G12Vfs\*2)                                            |                                                  |
+------------------------------------------------------+---------------------------------------------------------------------------------------------------------+--------------------------------------------------+

These and more options can be found by running `perl table_annovar.pl –help` in the terminal.

The results from the function look like this:

![](2024_04_15_figures/annovar%20results.png){fig-align="center"}

These .txt results can be imported into R using maftools. If you love Perl, you can use the [vcf2maf package](https://github.com/mskcc/vcf2maf) to convert the multianno.vcf files into MAF objects.

# maftools

## Read in ANNOVAR results

I copy/pasted the result files back into my R workspace in `2024_04_26_results`.

Now to read in the results, which are in multianno.txt files. We can use the `annovarToMaf()` function to do this. The function also lets us input a vector of files. This way it reads and combines them in one step.

```{r}
# Create an input vector of file names
file.names <- c("2024_04_26_results/DS-1-CL.hg38_multianno.txt",
                "2024_04_26_results/DS-1-Pt.hg38_multianno.txt",
                "2024_04_26_results/DS-76-CL.hg38_multianno.txt",
                "2024_04_26_results/DS-76-Pt.hg38_multianno.txt",
                "2024_04_26_results/DS-81-CL.hg38_multianno.txt",
                "2024_04_26_results/DS-81-Pt.hg38_multianno.txt")
```

Now to run annovarToMaf() It has the following syntax:

![](2024_04_15_figures/annovar to maf.png){fig-align="center"}

The following chunk provides specifies our file names, genome version, tab serparated txt file, and that they are MAF objects. `basename` provides a file name to write out a MAF file.

```{r}
ds.maf <- annovarToMaf(annovar = file.names,
                       refBuild = "hg38",
                       sep = "\t",
                       MAFobj = T,
                       basename = paste0(results.dir, "ds.maf"))

```

NOTE: I am taking advantage of a built in feature of the function. MAF files typically have a column called `Tumor_Sample_Barcode`, which is the package's version of sample id. If that column isn't found or specified, the function uses the filename to generate an ID. It is smart enough to clip off ".hg38_multianno.txt" as well, so if you have good file names they can carry over into your MAF object.

Take a look at the object. The variant data is in `ds.maf@data`.

```{r}
head(ds.maf@data)
```

## maftools : plots and analysis

Many of the plots below were generated following the [maftools vignette](https://www.bioconductor.org/packages/release/bioc/vignettes/maftools/inst/doc/maftools.html#1_Introduction). I have commented out the parts of the code that specify plot features and saves the plot for display purposes.

## Summary plot

This is the summary plot, which has a few things combined. Counts for variant classification, type, SNV class, variants per sample, and variant classification per sample. Also a list of the top ten mutated genes with an

```{r, fig.height=10, fig.width=12}
# png(filename = paste0(results.dir, "variant_summary_plot.png"),
#     width = 11,
#     height = 8,
#     units = "in",
#     res = 300,
#     bg = "white")

plotmafSummary(maf = ds.maf,
               showBarcodes = T)
# dev.off()
```

## Oncoplot

The `oncoplot()` function shows a larger view of a group of genes and their variant types. There is a [separate vignette on customizing these plots](https://bioconductor.org/packages/devel/bioc/vignettes/maftools/inst/doc/oncoplots.html).

```{r}
oncoplot(maf = ds.maf,
         top = 10)
```

Most of these genes have more than one mutation (usually 2 or more missense mutations), so they show up as black.

## Transitions and Transversions

This plot shows the breakdown of the single nucleotide polymorphisms (SNPs) and whether they are transitions or transversions.

```{r}
maf.titv <- titv(maf = ds.maf,
                 plot = TRUE)
```

## Lollipop plots

A "Lollipop Plot" lets you look at mutations on a gene of interest. From Dallas, I know that one of these samples has a JAK2 R683G mutation, which I confirmed by loading the raw bam and annotated vcf files into IGV viewer. Let's make sure the mutation is still there.

```{r}
# png(filename = paste0(results.dir, "JAK2_lollipop.png"),
#     width = 6,
#     height = 4,
#     units = "in",
#     res = 300,
#     bg = "white")

lollipopPlot(maf = ds.maf,
             gene = "JAK2",
             AACol = "AAChange.refGene",
             showMutationRate = T,
             labelPos = "all")

# dev.off()
```

There's our R683G mutation, displayed on the gene.

NOTE: To generate a plot, your MAF object must have amino acid change information. There may be several naming conventions for this column. By default, the function looks for a column called "AAChange."

The `getFields()` function shows the available fields, but double check that your MAF object has them

```{r}
getFields(ds.maf)

```

```{r}
# png(filename = paste0(results.dir, "variant_bar_plot.png"),
#     width = 11,
#     height = 8,
#     units = "in",
#     res = 300,
#     bg = "white")

mafbarplot(ds.maf, n = 40)

# dev.off()
```

```{r}
# png(filename = paste0(results.dir, "oncoplot.png"),
#     width = 11,
#     height = 8,
#     units = "in",
#     res = 300,
#     bg = "white")

oncoplot(maf = ds.maf, top = 20,
              # draw_titv = T,
              # showTumorSampleBarcodes = T
              )
# dev.off()
```

```{r}
# png(filename = paste0(results.dir, "JAK2.lollipop.png"),
#     width = 11,
#     height = 8,
#     units = "in",
#     res = 300,
#     bg = "white")

lollipopPlot(maf = ds.maf,
             gene = "JAK2",
             AACol = "AAChange.refGene",
             showMutationRate = T,
             labelPos = "all")
# dev.off()
```

```{r}
# png(filename = paste0(results.dir, "ABCA7.lollipop.png"),
#     width = 11,
#     height = 8,
#     units = "in",
#     res = 300,
#     bg = "white")

lollipopPlot(maf = ds.maf,
             gene = "ABCA7",
             AACol = "AAChange.refGene",
             showMutationRate = T,
             labelPos = "all")

# dev.off()
```

# sessionInfo()

```{r}
sessionInfo()
```
