---
title: "2024_04_15_vcf_to_maf_troubleshooting"
editor: source
format: 
  html:
    page-layout: full
    df-print: kable
---

I initially ran `2024_03_14_VCF_to_MAF.qmd` and got some good looking results for variant analysis. However, there were some issues. Patient 76 is known to have a JAK2 R683G mutation, which can be confirmed by looking at the bam and annotated vcf files in IGV software. The results of the pipeline, however, showed no mutations on JAK2 for any of the samples.

This notebook will try and identify where the loss of this mutation happens in the patient 76 data.

# Libraries

```{r}
suppressPackageStartupMessages({
library(tidyverse)
library(vcfR)
library(maftools)
})

options(future.globals.maxSize = 14000 * 1024^2) 
```

# Directories

```{r}
data.dir <- "data/raw_data/"

results.dir <- "2024_04_15_results/"

if(!exists(results.dir)){
  dir.create(results.dir)
}
```

# Read in VCF file

```{r}
vcf <- vcfR::read.vcfR(file = paste0(data.dir, "x76_C_S47.haplotypecaller.filtered_snpEff.ann.vcf"))

# turn vcf file into dataframe (technically a S4 object but it contains a df with the variant data)
vcf.df <- vcfR2tidy(vcf)
```

From the IGV software, the R683G mutation occurs on chromosome 9 at position 5,078,360. Let's try and find that in the `vcf.df$fix` dataframe.

```{r}
vcf.df$fix |> 
  dplyr::filter(CHROM == "chr9",
                POS > 5078000,
                POS < 5079000)
```

There it is. Now we can track it through the process.

The next code chunk is copy/pasted from Tzu's notebook. It creates a tab separated value file using 5 columns from the `vcf$fix` dataframe. Rather than save the file, I have it outputting the result below. A last filter step looks for our mutation. We can't filter using `CHROM`, as we did in the previous code chunk, so this will return all variants that match the `POS` range.

```{r}
vcf.df$fix |> 
  dplyr::select(ChromKey, POS, REF, ALT, QUAL) |> 
  mutate(END = (POS + nchar(REF)) - 1, .after = POS) |> 
  # write_tsv(file = paste0(results.dir, "temp.avinput"), col_names = F)
  filter(POS > 5078000,
         POS < 5079000)
```

This is different than before. Our mutation is there, but we lost the "chr9" and it has 22 listed in the `ChromKey` column.

This might be where our issue is. Tzu's VCF files had the chromosome listed under the `ChromKey` variable. In the case our our dataset, `CHROM` represents the chromosome number.

Let's try it again and switch `ChromKey` to `CHROM`.

```{r}
vcf.df$fix |> 
  dplyr::select(CHROM, POS, REF, ALT, QUAL) |> 
  mutate(END = (POS + nchar(REF)) - 1, .after = POS) |> 
  write_tsv(file = paste0(results.dir, "avinput/temp.avinput"), col_names = F) |>  
  filter(CHROM == "chr9",
         POS > 5078000,
         POS < 5079000)
```

We still have our mutation and chromosome info now. Let's see if we can feed this tsv into the ANNOVAR function. I am not sure if ANNOVAR can recognize the mixed character/number value of "chr9".

Outside of R, I opened up a powershell terminal. Then I navigated to the folder with `table_annovar.pl` script along with our reference files. I also activated the conda environment ("annotation") that has perl installed.

Commenting out the powershell code so knitr can render this html document

```{powershell}
# cd .\conda_projects\2023_10_17_Dallas_SNP_vcf_files\
# 
# conda activate annotation
```

Now to run ANNOVAR.

```{powershell}
# perl table_annovar.pl data/temp.avinput annovar/humandb/ -buildver hg19 -out results/temp -remove -protocol refGene,cytoBand,exac03,avsnp147,dbnsfp30a -operation gx,r,f,f,f -nastring . -csvout -polish -xref annovar/example/gene_xref.txt
```

Now to read in the results, which are in "multianno" .csv files.

```{r}
df.76 <- read_csv(file = paste0(results.dir, "multianno/temp.hg19_multianno.csv")) |> 
  mutate(sample = "x76_C_S47", .after = Alt)
```

Take a look at the object

```{r}
head(df.76)
```

Based on the columns, the code below should find our R683G mutation if it's still there. `CHROM` is now `Chr`, and `POS` now has `Start` and `End` values

```{r}
df.76 |> 
  filter(Chr == "chr9",
         Start > 5078000,
         End < 5079000)
```

Still got it. Let's continue through the MAF processing to make sure there are no new downstream errors. For



# MAFtools

```{r}
write_tsv(df.76, file = paste0(results.dir, "multianno/temp_multianno.txt"))

ds.maf <- maftools::annovarToMaf(paste0(results.dir, "multianno/temp_multianno.txt"),
                                 MAFobj = T,
                                 tsbCol = "sample")
```
```{r}
View(ds.maf)
```

The variant data is in `ds.maf@data`.

```{r}
head(ds.maf@data)
```
New column names for filtering are `Chromosome`, `Start_Position`, and `End_Position.` We can use them to look for our mutation again.

```{r}
ds.maf@data |> 
  dplyr::filter(Chromosome == "chr9",
                Start_Position > 5078000,
                End_Position < 5079000)
```

Still there! Now we can use the maftools functions to make some plots. Commenting out the code that saves a copy of the plots and only displaying the plots here.

```{r, fig.height=10}
# png(filename = paste0(results.dir, "variant_summary_plot.png"),
#     width = 11,
#     height = 8,
#     units = "in",
#     res = 300,
#     bg = "white")

plotmafSummary(maf = ds.maf)

# dev.off()
```

Now for the moment of truth, the lollipop plot.

```{r}
lollipopPlot(maf = ds.maf,
             gene = "JAK2",
             AACol = "AAChange.refGene",
             showMutationRate = T,
             labelPos = "all")
```

There's our R683G mutation, displayed on the gene. I have a lot more confidence in the other variant results now.

Let's remove our temporary files from our single example and repeat the process with the rest of the samples.

```{r}
rm(vcf, vcf.df, x76_C_S47, temp, df.76, ds.maf)
```

# Re run annovar with other files

This function will read in the vcf files, perform vcfR2tidy, and output a tsv file with the selected columns.

```{r}
vcf.to.avinput <- function(x) {
  vcf <- vcfR::read.vcfR(file = paste0(data.dir, x, ".haplotypecaller.filtered_snpEff.ann.vcf"))

  vcf.df <- vcfR2tidy(vcf)
  
  vcf.df$fix |> 
    dplyr::select(CHROM, POS, REF, ALT, QUAL) |> 
    mutate(END = (POS + nchar(REF)) - 1, .after = POS) |> 
    write_tsv(file = paste0(results.dir, "avinput/", x, ".avinput"), col_names = F)
}
```

Input vector for function

```{r}
files.names <- c("DS1_X_S34", "DS1_Pt_S37", "x81_C_S50", "x7657_11_S22", "x8178_25_S16")
```

Run the function

```{r}
for (i in files.names) {
  vcf.to.avinput(i)
}
```

Back in the powershell conda environment, I ran annovar.pl for each of the remaining samples.

```{perl}
# perl table_annovar.pl data/x8178_25_S16.avinput annovar/humandb/ -buildver hg19 -out results/x8178_25_S16 -remove -protocol refGene,cytoBand,exac03,avsnp147,dbnsfp30a -operation gx,r,f,f,f -nastring . -csvout -polish -xref annovar/example/gene_xref.txt
```

NOTE: I ran this code five times, copy/pasting the file names in each time (ex: "data/x8178_25_S16.avinput" and "results/x8178_25_S16"). I would write a script to perform a loop in powershell/perl for larger sample datasets.

Now that they have been reprocessed, time to read them back in and merge them into one MAF file. At this point, Dallas gave me better sample names for each file, so I am adding a `sample` column with the new name. This will also help us differentiate between the samples in the merged maf object.

Rather than re-run it through the annovar step or change the name outside of this notebook, I am reloading temp.hg19_multianno.csv since it was our earlier proof-of-concept VCF file.

```{r}
DS1_Pt_S37 <- read_csv(paste0(results.dir, "multianno/DS1_Pt_S37.hg19_multianno.csv")) |> 
  mutate(sample = "DS-1-Pt", .after = Alt)
DS1_X_S34 <- read_csv(paste0(results.dir, "multianno/DS1_X_S34.hg19_multianno.csv")) |> 
  mutate(sample = "DS-1-CL", .after = Alt)
x76_C_S47 <- read_csv(paste0(results.dir, "multianno/temp.hg19_multianno.csv")) |> 
  mutate(sample = "DS-76-CL", .after = Alt)
x81_C_S50 <- read_csv(paste0(results.dir, "multianno/x81_C_S50.hg19_multianno.csv")) |> 
  mutate(sample = "DS-81-CL", .after = Alt)
x7657_11_S22 <- read_csv(paste0(results.dir, "multianno/x7657_11_S22.hg19_multianno.csv")) |> 
  mutate(sample = "DS-76-Pt", .after = Alt)
x8178_25_S16 <- read_csv(paste0(results.dir, "multianno/x8178_25_S16.hg19_multianno.csv")) |> 
  mutate(sample = "DS-81-Pt", .after = Alt)
```

Combine the files together and output the txt file. Then I remove the extra files to save room.

```{r}
ds.df <- bind_rows(DS1_Pt_S37, DS1_X_S34, x76_C_S47, x81_C_S50, x7657_11_S22, x8178_25_S16)

write_tsv(ds.df, file = paste0(results.dir, "multianno/all_multianno.txt"))

rm(DS1_Pt_S37, DS1_X_S34, x76_C_S47, x81_C_S50, x7657_11_S22, x8178_25_S16, ds.df)
```

# MAFtools

Now to read in the combined tsv text file into a single MAF object.

```{r}
ds.maf <- maftools::annovarToMaf(paste0(results.dir, "multianno/all_multianno.txt"),
                                 MAFobj = T,
                                 tsbCol = "sample")
```

# Plots

```{r, fig.height=10}
# png(filename = paste0(results.dir, "variant_summary_plot.png"),
#     width = 11,
#     height = 8,
#     units = "in",
#     res = 300,
#     bg = "white")

plotmafSummary(maf = ds.maf)

# dev.off()
```

```{r}
# png(filename = paste0(results.dir, "variant_bar_plot.png"),
#     width = 11,
#     height = 8,
#     units = "in",
#     res = 300,
#     bg = "white")

mafbarplot(ds.maf, n = 40)

# dev.off()
```

```{r}
# png(filename = paste0(results.dir, "oncoplot.png"),
#     width = 11,
#     height = 8,
#     units = "in",
#     res = 300,
#     bg = "white")

oncoplot(maf = ds.maf, top = 20,
              # draw_titv = T,
              # showTumorSampleBarcodes = T
              )
# dev.off()
```

```{r}
# png(filename = paste0(results.dir, "JAK2.lollipop.png"),
#     width = 11,
#     height = 8,
#     units = "in",
#     res = 300,
#     bg = "white")

lollipopPlot(maf = ds.maf,
             gene = "JAK2",
             AACol = "AAChange.refGene",
             showMutationRate = T,
             labelPos = "all")
# dev.off()
```

```{r}
# png(filename = paste0(results.dir, "ABCA7.lollipop.png"),
#     width = 11,
#     height = 8,
#     units = "in",
#     res = 300,
#     bg = "white")

lollipopPlot(maf = ds.maf,
             gene = "ABCA7",
             AACol = "AAChange.refGene",
             showMutationRate = T,
             labelPos = "all")

# dev.off()
```





# sessionInfo()

```{r}
sessionInfo()
```

